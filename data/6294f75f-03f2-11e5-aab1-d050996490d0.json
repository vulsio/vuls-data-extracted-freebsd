{
	"id": "6294f75f-03f2-11e5-aab1-d050996490d0",
	"advisories": [
		{
			"content": {
				"id": "6294f75f-03f2-11e5-aab1-d050996490d0",
				"title": "cURL -- multiple vulnerabilities",
				"description": "\n\t<p>cURL reports:</p>\n\t<blockquote cite=\"http://curl.haxx.se/docs/adv_20150422A.html\">\n\t  <p>libcurl keeps a pool of its last few connections around\n\t    after use to facilitate easy, convenient, and completely\n\t    transparent connection re-use for applications.</p>\n\t  <p>When doing HTTP requests NTLM authenticated, the entire\n\t    connection becomes authenticated and not just the\n\t    specific HTTP request which is otherwise how HTTP works.\n\t    This makes NTLM special and a subject for special\n\t    treatment in the code. With NTLM, once the connection is\n\t    authenticated, no further authentication is necessary until\n\t    the connection gets closed.</p>\n\t</blockquote>\n\t<blockquote cite=\"http://curl.haxx.se/docs/adv_20150422B.html\">\n\t  <p>When doing HTTP requests Negotiate authenticated, the\n\t    entire connection may become authenticated and not just\n\t    the specific HTTP request which is otherwise how HTTP\n\t    works, as Negotiate can basically use NTLM under the hood.\n\t    curl was not adhering to this fact but would assume that\n\t    such requests would also be authenticated per request.</p>\n\t</blockquote>\n\t<blockquote cite=\"http://curl.haxx.se/docs/adv_20150422C.html\">\n\t  <p>libcurl supports HTTP \"cookies\" as documented in RFC 6265.\n\t    Together with each individual cookie there are several\n\t    different properties, but for this vulnerability we\n\t    focus on the associated \"path\" element. It tells\n\t    information about for which path on a given host the\n\t    cookies is valid.</p>\n\t  <p>The internal libcurl function called sanitize_cookie_path()\n\t    that cleans up the path element as given to it from a\n\t    remote site or when read from a file, did not properly\n\t    validate the input. If given a path that consisted of a\n\t    single double-quote, libcurl would index a newly\n\t    allocated memory area with index -1 and assign a zero\n\t    to it, thus destroying heap memory it wasn't supposed to.</p>\n\t</blockquote>\n\t<blockquote cite=\"http://curl.haxx.se/docs/adv_20150422D.html\">\n\t  <p>There is a private function in libcurl called fix_hostname()\n\t    that removes a trailing dot from the host name if there is\n\t    one. The function is called after the host name has been\n\t    extracted from the URL libcurl has been told to act on.</p>\n\t  <p>If a URL is given with a zero-length host name, like in\n\t    \"http://:80\" or just \":80\", fix_hostname() will index the\n\t    host name pointer with a -1 offset (as it blindly assumes\n\t    a non-zero length) and both read and assign that address.</p>\n\t</blockquote>\n      ",
				"references": [
					{
						"source": "vuxml.freebsd.org",
						"url": "http://curl.haxx.se/docs/adv_20150422A.html"
					},
					{
						"source": "vuxml.freebsd.org",
						"url": "http://curl.haxx.se/docs/adv_20150422B.html"
					},
					{
						"source": "vuxml.freebsd.org",
						"url": "http://curl.haxx.se/docs/adv_20150422C.html"
					},
					{
						"source": "vuxml.freebsd.org",
						"url": "http://curl.haxx.se/docs/adv_20150422D.html"
					},
					{
						"source": "vuxml.freebsd.org",
						"url": "https://www.vuxml.org/freebsd/6294f75f-03f2-11e5-aab1-d050996490d0.html"
					}
				],
				"published": "2015-05-26T00:00:00Z"
			},
			"segments": [
				{
					"ecosystem": "freebsd"
				}
			]
		}
	],
	"vulnerabilities": [
		{
			"content": {
				"id": "CVE-2014-3143",
				"references": [
					{
						"source": "vuxml.freebsd.org",
						"url": "https://www.cve.org/CVERecord?id=CVE-2014-3143"
					}
				]
			},
			"segments": [
				{
					"ecosystem": "freebsd"
				}
			]
		},
		{
			"content": {
				"id": "CVE-2014-3144",
				"references": [
					{
						"source": "vuxml.freebsd.org",
						"url": "https://www.cve.org/CVERecord?id=CVE-2014-3144"
					}
				]
			},
			"segments": [
				{
					"ecosystem": "freebsd"
				}
			]
		},
		{
			"content": {
				"id": "CVE-2014-3145",
				"references": [
					{
						"source": "vuxml.freebsd.org",
						"url": "https://www.cve.org/CVERecord?id=CVE-2014-3145"
					}
				]
			},
			"segments": [
				{
					"ecosystem": "freebsd"
				}
			]
		},
		{
			"content": {
				"id": "CVE-2014-3148",
				"references": [
					{
						"source": "vuxml.freebsd.org",
						"url": "https://www.cve.org/CVERecord?id=CVE-2014-3148"
					}
				]
			},
			"segments": [
				{
					"ecosystem": "freebsd"
				}
			]
		}
	],
	"detections": [
		{
			"ecosystem": "freebsd",
			"conditions": [
				{
					"criteria": {
						"operator": "OR",
						"criterions": [
							{
								"vulnerable": true,
								"fix_status": {
									"class": "unknown"
								},
								"package": {
									"name": "curl"
								},
								"affected": {
									"type": "freebsd-pkg",
									"range": [
										{
											"lt": "7.42.0"
										}
									]
								}
							}
						]
					}
				}
			]
		}
	],
	"data_source": {
		"id": "freebsd",
		"raws": [
			"vuls-data-raw-freebsd/6294f75f-03f2-11e5-aab1-d050996490d0.json"
		]
	}
}
